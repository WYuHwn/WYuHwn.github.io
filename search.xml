<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2024/05/27/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
      <categories>
        <category>Tech</category>
      </categories>
  </entry>
  <entry>
    <title>Hello World1</title>
    <url>/2024/05/28/hello-world1/</url>
    <content><![CDATA[<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
      <categories>
        <category>Life</category>
      </categories>
  </entry>
  <entry>
    <title>基于Hexo的静态博客部署至阿里云服务器</title>
    <url>/2024/05/29/t-hexo-deploy/</url>
    <content><![CDATA[<h2 id="一、写在前面"><a href="#一、写在前面" class="headerlink" title="一、写在前面"></a>一、写在前面</h2><h3 id="1-部署方式"><a href="#1-部署方式" class="headerlink" title="1.部署方式"></a>1.部署方式</h3><p>博客部署有两种选择：</p>
<ul>
<li>托管至GitHub或者Gitee上: 借用Github或Gitee的这一功能部署网站，操作简单且免费。国内访问速度方面Gitee&gt;Github。</li>
<li>部署至私有云服务器上：需要花钱购买服务器、域名，此方式自主性强且相应速度快。<br>在此文章中我将叙述如何将本地的Hexo静态博客部署至私有云服务器上。</li>
</ul>
<h3 id="2-相关环境"><a href="#2-相关环境" class="headerlink" title="2.相关环境"></a>2.相关环境</h3><ul>
<li>阿里云服务器: ①CPU&amp;内存-2核(vCPU) 2GiB; ②操作系统: Ubuntu 20.04 64位; ③公网带宽: 3Mbps</li>
<li>Nodejs版本(云服务器上):  v20.13.1</li>
<li>Git版本(云服务器上): v2.25.1</li>
<li>Nginx版本(云服务器上): v1.18.0(Ubuntu)</li>
</ul>
<h3 id="3-前置准备"><a href="#3-前置准备" class="headerlink" title="3.前置准备"></a>3.前置准备</h3><ul>
<li>本地成功搭建Hexo博客</li>
<li>本地成功安装了Git工具</li>
<li>域名与云服务器公有Ip实现映射绑定</li>
</ul>
<h2 id="二、工作原理"><a href="#二、工作原理" class="headerlink" title="二、工作原理"></a>二、工作原理</h2><p>本地撰写的博客会保存在source目录内，当我们输入<code>hexo generate</code>命令时，Hexo将会把我们写的Markdown文件渲染成静态文件(即网页文件)，输入<code>hexo deploy</code>时，Hexo会通过我们的配置好的免密登陆连接至服务器并将生成的静态文件推送至服务器的Git仓库内。当Git仓库内容发生变更时则会触发钩子文件进而将仓库内的内容部署至网站根目录下。<br>此外我们还需要配置好Nginx服务和域名解析，这样当用户访问我们博客的域名时，域名将会被重定向为云服务的公有Ip地址并通过Nginx服务访问网站根目录里的静态文件。相关流程图如下所示:<img src="https://cdn.jsdelivr.net/gh/WYuHwn/yam-images@main/tech/hexo_depoly.webp" alt="部署流程图"  data-tag='post-image' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<h2 id="三、搭建步骤-针对云服务器"><a href="#三、搭建步骤-针对云服务器" class="headerlink" title="三、搭建步骤(针对云服务器)"></a>三、搭建步骤(针对云服务器)</h2><h3 id="1-服务端初始配置"><a href="#1-服务端初始配置" class="headerlink" title="1.服务端初始配置"></a>1.服务端初始配置</h3><ul>
<li>前往阿里云网站的控制台，记录云服务器的公网Ip: 控制台-&gt;云服务器ESC-&gt;公网Ip</li>
<li>设置阿里云服务器安全组：需要开放80端口(HTTP默认访问端口)、443端口(HTTPS默认访问端口)以及22端口。具体如下图:<img src="https://cdn.jsdelivr.net/gh/WYuHwn/yam-images@main/tech/security_group.webp" alt="安全组图"  data-tag='post-image' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></li>
<li>重置服务器登陆密码，用于远程云登陆服务器：控制台-&gt;云服务ESC-&gt;服务器实例-&gt;全部操作(右上角)-&gt;重置实例密码</li>
</ul>
<h3 id="2-远程登陆服务器"><a href="#2-远程登陆服务器" class="headerlink" title="2.远程登陆服务器"></a>2.远程登陆服务器</h3><ul>
<li>打开Xshell并新建会话：①协议：SSH; ②主机: 云服务器公网Ip; ③端口号: 22</li>
<li>点击连接：①用户名: root; ②密码: 即上述重置服务器登陆密码时输入的密码</li>
<li>登陆成功后终端显示如下图:<img src="https://cdn.jsdelivr.net/gh/WYuHwn/yam-images@main/tech/Xshell_Connect.webp" alt="Xshell_Connect"  data-tag='post-image' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></li>
</ul>
<h3 id="3-创建Hexo部署目录"><a href="#3-创建Hexo部署目录" class="headerlink" title="3.创建Hexo部署目录"></a>3.创建Hexo部署目录</h3><p>Hexo部署目录实质就是云服务器中存放博客的位置。使用Xshell成功连接远程服务器后输入如下命令:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir -p /data/blog # 注意这个路径可按照自定义来</span><br></pre></td></tr></table></figure>
<h3 id="4-安装Nodejs"><a href="#4-安装Nodejs" class="headerlink" title="4.安装Nodejs"></a>4.安装Nodejs</h3><ul>
<li><p>在Xshell终端输入如下命令:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get install -y curl</span><br><span class="line">curl -fsSL https://deb.nodesource.com/setup_20.x -o nodesource_setup.sh</span><br><span class="line">sudo -E bash nodesource_setup.sh</span><br><span class="line">sudo apt-get install -y nodejs</span><br></pre></td></tr></table></figure>
</li>
<li><p>成功安装后依次输入命令: <code>node -v</code>和<code>npm -v</code>，若可显示相应版本号则说明安装成功<br>PS:上述命令安装的Nodejs版本为<strong>v20.13.1</strong>，如需要安装其他版本则可从<a href="https://github.com/nodesource/distributions">NodeSource</a>安装</p>
</li>
</ul>
<h3 id="5-安装Git"><a href="#5-安装Git" class="headerlink" title="5.安装Git"></a>5.安装Git</h3><ul>
<li><p>在Xshell终端输入命令: <code>sudo apt-get install git-core</code></p>
</li>
<li><p>成功安装后输入命令: <code>git --version</code>，若可显示其版本号则说明安装成功</p>
</li>
</ul>
<h3 id="6-安装Nginx"><a href="#6-安装Nginx" class="headerlink" title="6.安装Nginx"></a>6.安装Nginx</h3><ul>
<li><p>在Xshell终端输入命令: <code>sudo apt install nginx -y</code></p>
</li>
<li><p>成功安装后输入命令: <code>nginx -v</code>，若可显示版本号则说明安装成功</p>
</li>
<li><p>启动Nginx服务：<code>systemctl start nginx.service</code></p>
</li>
<li><p>查看Nginx服务运行状态: <code>systemctl status nginx</code>，若出现<font color='green'>active</font>字样则说明Nginx服务启动成功</p>
</li>
</ul>
<h3 id="7-配置Nginx"><a href="#7-配置Nginx" class="headerlink" title="7.配置Nginx"></a>7.配置Nginx</h3><ul>
<li><p>查看<strong>nginx.conf</strong>文件位置: <code>nginx -t</code>,一般为’&#x2F;etc&#x2F;nginx&#x2F;nginx.conf’</p>
</li>
<li><p>修改<strong>nginx.conf</strong>文件: <code>nano /etc/nginx/nginx.conf</code>，在<strong>http</strong>模块中添加如下代码：</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name 域名;</span><br><span class="line">    return 301 https://$server_name$request_uri;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen 443 ssl;</span><br><span class="line">    server_name 域名;</span><br><span class="line">    # 证书文件名称pem文件</span><br><span class="line">    ssl_certificate /xxx/xxx/域名.pem;</span><br><span class="line">    # 证书私钥文件名称key文件</span><br><span class="line">    ssl_certificate_key /xxx/xxx/域名.key;</span><br><span class="line">    # ssl验证配置 缓存有效期</span><br><span class="line">    ssl_session_timeout 5m;</span><br><span class="line">    # 安全链接可选的加密协议</span><br><span class="line">    ssl_protocols TLSv1 TLSv1.1 TLSv1.2 TLSv1.3;</span><br><span class="line">    # 配置加密套件和/加密算法</span><br><span class="line">    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE;</span><br><span class="line">    # 使用服务器端的首选算法</span><br><span class="line">    ssl_prefer_server_ciphers on;</span><br><span class="line"></span><br><span class="line">    # 指定虚拟主机根目录</span><br><span class="line">    location / &#123;</span><br><span class="line">        root /data/blog; # root后路径为Hexo在云服务器的部署目录</span><br><span class="line">        index index.html index.htm;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Ps: ssl证书可从域名购买平台上申请，然后下载上传至云服务器自定义位置即可</p>
</li>
</ul>
<h3 id="8-添加git用户"><a href="#8-添加git用户" class="headerlink" title="8.添加git用户"></a>8.添加git用户</h3><ul>
<li><p><strong>root</strong>用户默认的权限过大，处于安全考虑为云服务器添加名为git的用户，用于将博客自动部署至云服务器上</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">useradd git # 添加名为git的用户</span><br><span class="line">passwd xxx # 修改git用户的密码</span><br></pre></td></tr></table></figure>
</li>
<li><p>为git用户授予sudo权限，执行<code>nano /etc/sudoers</code>，在<code>root ALL=(ALL:ALL) ALL</code>语句下添加<code>git ALL=(ALL:ALL) ALL</code></p>
</li>
</ul>
<h3 id="9-为git用户添加SSH密钥"><a href="#9-为git用户添加SSH密钥" class="headerlink" title="9.为git用户添加SSH密钥"></a>9.为git用户添加SSH密钥</h3><p>目前为止，对git仓库进行的所有操作都需要输入密码，我们可以通过为git用户添加SSH密钥的方式来实现免密登录。原理：在本地生成一对密钥文件（分别是公钥和私钥），将公钥文件上传到服务器上；服务器收到连接请求时，会将本地的公钥与服务器的公钥进行比对，用私钥解密服务器发来的一段信息并将其发回，验证通过后准许连接。</p>
<ul>
<li><p>在<strong>本地计算机</strong>上打开Git Bush执行命令: <code>ssh-keygen -t rsa</code>，生成密钥对。运行完后可在’C:\Users\用户名.ssh’文件下找到’id_rsa’和’id_rsa.pub’文件，前者为私钥文件，后者为公钥文件</p>
</li>
<li><p>在Xshell终端先执行<code>makdir -p /home/git/.ssh</code>，后执行<code>cd /home/git/.ssh</code>以及<code>nano authorized_keys</code>，输入内容为**’id_rsa.pub’**文件内容</p>
</li>
<li><p>在Xshell终端中执行如下代码：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">su root # 从git用户更换至root用户</span><br><span class="line">chmod 600 /home/git/.ssh/authorized_keys</span><br><span class="line">chmod 700 /home/git/.ssh</span><br></pre></td></tr></table></figure>
</li>
<li><p>将.ssh文件夹及其内的所有文件所有权转交给git用户: <code>chown -R git:git /home/git/.ssh</code></p>
</li>
<li><p>在<strong>本地计算机</strong>测试是否可以用ssh免密登录服务器，在Git Bash中执行<code>ssh -v git@xxx.xxx.xxx.xxx</code>(Ps:git@后填写服务器的公网Ip) ,若成功则会出现’Welcome to Alibaba Cloud Elastic Compute Service !’提示语。</p>
</li>
</ul>
<h3 id="10-创建Git仓库并配置自动部署"><a href="#10-创建Git仓库并配置自动部署" class="headerlink" title="10.创建Git仓库并配置自动部署"></a>10.创建Git仓库并配置自动部署</h3><p>这里的Git仓库（repository）可以理解为一个存放着不同版本代码的代码库，包含了项目所有的源文件和版本控制信息。但我们在这里需要用到的是裸库，即仅包含版本控制信息的仓库。后者不保存文件，常用作服务器仓库，实现数据共享和同步。自动部署的核心在于git-hooks（钩子），可以理解为一种脚本，在特定条件下触发时会调用钩子并执行钩子文件中的内容。</p>
<ul>
<li><p>Xshell切换到<strong>root</strong>用户，新建目录并在该目录下创建Git仓库</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /home/git</span><br><span class="line">git init --bare blog.git # 创建一个名为blog的仓库，--bare参数为创建裸库</span><br></pre></td></tr></table></figure>
</li>
<li><p>打开’&#x2F;home&#x2F;git&#x2F;blog.git&#x2F;hooks’目录下的<strong>post-receive</strong>钩子文件(若无则新建)，往其添加内容<code>git --work-tree=/data/blog --git-dir=/home/git/blog.git checkout -f</code>。(Ps:work-tree填写Hexo部署目录，git-dir填写Git仓库的目录)</p>
</li>
<li><p>为钩子文件及Git仓库目录配置权限。这里需要将我们创建的仓库及部署目录的所有权移交给git用户，因为Linux下创建文件时默认只有拥有者（即创建者）才具有读写权限，而Git进行push操作时登录的用户为git用户。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chmod +x /home/git/blog.git/hooks/post-receive     #为钩子文件授予可执行权限（+x）</span><br><span class="line">chown -R git:git /home/git    #将仓库目录的所有权移交给git用户</span><br><span class="line">chown -R git:git /data/blog     #将Hexo部署目录的所有权移交给git用户</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="11-在本地计算机中更改本地博客部署路径"><a href="#11-在本地计算机中更改本地博客部署路径" class="headerlink" title="11.在本地计算机中更改本地博客部署路径"></a>11.在本地计算机中更改本地博客部署路径</h3><ul>
<li><p>打开本地计算机的Hexo文件夹，在<strong>_config.yml</strong>文件中找到deploy语句并进行如下修改：</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">    type: git</span><br><span class="line">    repository: git@xxx.xxx.xxx.xxx:/home/git/blog.git # git@云服务器公网Ip:云服务器Git仓库地址</span><br><span class="line">    branch: master</span><br></pre></td></tr></table></figure>
</li>
<li><p>依次执行命令<code>hexo clean</code>、<code>hexo generate</code>、<code>hexo deploy</code>并对云服务器’&#x2F;data&#x2F;blog’目录刷新，若有文件出现(该目录原为空目录)则说明博客已成功部署至云服务器上，至此可以在浏览器中输入域名来访问博客站点。(Ps：若域名未与公网Ip绑定&lt;即域名解析&gt;，则无法实现输入域名访问博客站点)</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Tech</category>
      </categories>
      <tags>
        <tag>Cloud Server</tag>
        <tag>Deployment</tag>
        <tag>Blog</tag>
      </tags>
  </entry>
</search>
