<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2024/05/27/hello-world/</url>
    <content><![CDATA[<blockquote>
<p>蝉鸣是夏天的前言，也是我回忆的诗篇…</p>
</blockquote>
<span id="more"></span>

<blockquote>
<p>定风波 宋·苏轼<br>三月七日，沙湖道中遇雨。雨具先去，同行皆狼狈，余独不觉。已而遂晴，故作此词。<br>莫听穿林打叶声，何妨吟啸且徐行。竹杖芒鞋轻胜马，谁怕？一蓑烟雨任平生。<br>料峭春风吹酒醒，微冷，山头斜照却相迎。回首向来萧瑟处，归去，也无风雨也无晴。</p>
</blockquote>
]]></content>
      <categories>
        <category>Life</category>
      </categories>
      <tags>
        <tag>Blog</tag>
      </tags>
  </entry>
  <entry>
    <title>C语言中函数间动态内存的传递</title>
    <url>/2024/09/08/t-dynamic-memory/</url>
    <content><![CDATA[<blockquote>
<p>在编程实现从字符串提取连续的数字时，发现在函数内申请的动态内存无法传递到main函数中使用，基于此写下这篇文章，探究C语言中函数间动态内存的传递方式。</p>
</blockquote>
<span id="more"></span>

<h2 id="一、写在前面"><a href="#一、写在前面" class="headerlink" title="一、写在前面"></a>一、写在前面</h2><p>C语言中，动态申请的内存划分在堆中，其生存周期与程序生存周期一致，系统不会自动回收，需要程序员调用free()函数手动调用。既然如此，如果在函数中申请一个动态内存，那么如何在main函数中调用呢？</p>
<h2 id="二、具体实例"><a href="#二、具体实例" class="headerlink" title="二、具体实例"></a>二、具体实例</h2><h3 id="1-错误实例"><a href="#1-错误实例" class="headerlink" title="1.错误实例"></a>1.错误实例</h3><p>有如下代码：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Func</span><span class="params">(<span class="type">int</span> a[], <span class="type">int</span> n)</span></span><br><span class="line">&#123;</span><br><span class="line">    a = (<span class="type">int</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">int</span>)*n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;n; i++) a[i] = i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> n = <span class="number">5</span>, *a = <span class="literal">NULL</span>;</span><br><span class="line">    Func(a, n);</span><br><span class="line">    <span class="keyword">if</span>(!a) <span class="built_in">printf</span>(<span class="string">&quot;a is null!\n&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;n; i++) <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, a[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上述代码中，在Func()函数中对a数组进行了动态内存申请，在main()函数中进行调用，程序运行结果为<code>a is null!</code>。造成这种结果是因为此时函数传递方式为值传递，这意味着将指针a传递给函数Func()时，实际上是传递了一个a的副本即当在Func()函数内为a分配内存时，实际上在修改a的副本而不是main()函数中的a。</p>
<h3 id="2-正确实例"><a href="#2-正确实例" class="headerlink" title="2.正确实例"></a>2.正确实例</h3><p>在C语言中，函数之间的动态内存传递方式主要有两种：①使用函数传参的方式。此时形参必须为<strong>双维指针</strong>，否则函数内分配的动态内存无法传入至主函数中。②采用函数返回值的形式，返回值为<strong>单维指针</strong>。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 方式一：函数传参</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Func</span><span class="params">(<span class="type">int</span> **a, <span class="type">int</span> n)</span></span><br><span class="line">&#123;</span><br><span class="line">    *a = (<span class="type">int</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">int</span>)*n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;n; i++) (*a)[i] = i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> n = <span class="number">5</span>, *a = <span class="literal">NULL</span>;</span><br><span class="line">    Func(&amp;a, n);</span><br><span class="line">    <span class="keyword">if</span>(!a) <span class="built_in">printf</span>(<span class="string">&quot;a is null!\n&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;n; i++) <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, a[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 方式二: 函数返回值</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span>* <span class="title function_">Func</span><span class="params">(<span class="type">int</span> n)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> *temp = (<span class="type">int</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">int</span>)*n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;n; i++) temp[i] = i;</span><br><span class="line">    <span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> n = <span class="number">5</span>, *a = <span class="literal">NULL</span>;</span><br><span class="line">    a = Func(n);</span><br><span class="line">    <span class="keyword">if</span>(!a) <span class="built_in">printf</span>(<span class="string">&quot;a is null!\n&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;n; i++) <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, a[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="三、题外话"><a href="#三、题外话" class="headerlink" title="三、题外话"></a>三、题外话</h2><p>在C语言中动态内存的申请可采用malloc()和realloc()函数，前者仅需要传递一个函数参数即需要的内存大小，而后者则需要传递两个函数参数即ealloc(ptr, size)，ptr为目的函数指针，成功时返回指向新内存块的指针且原内存将会释放；失败时返回NULL且原指针ptr指向的内存块仍然有效。若ptr为空指针，则该函数效果同malloc()函数。<br>实际上，realloc()函数用于对已分配内存的扩展，其扩展机制如下：</p>
<ul>
<li>若ptr所指的位置可以继续找到足够的连续内存空间，则该函数会直接在原有内存块的基础上扩展内存。此时返回的地址为ptr原地址；</li>
<li>若原位置不能扩展，则该函数会在堆中新寻找一个合适的位置并将原内存块的数据复制到新位置以及<strong>释放原有内存块</strong>。</li>
</ul>
]]></content>
      <categories>
        <category>Tech</category>
      </categories>
      <tags>
        <tag>C</tag>
        <tag>Dynamic Memory</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo博客引入Giscus评论系统</title>
    <url>/2024/05/31/t-comment-deploy/</url>
    <content><![CDATA[<blockquote>
<p>其实将Giscus评论系统引入Hexo博客中操作很简单，但是想到自己一开始看着<a href="https://hexo-theme-async.imalun.com/guide/config">Hexo-Theme-Async</a>文档所介绍的操作依然不知所措的场景，最后还是决定写篇文章讲讲具体的流程。</p>
</blockquote>
<span id="more"></span>
<h1 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h1><p>Giscus是由<a href="https://docs.github.com/en/discussions">Github Discussions</a>实现的评论系统，它主要有三个优点：①开源；②无跟踪、无广告且永久免费；③无需数据库，所有数据均存储在Github Discussions中。</p>
<h2 id="1-工作原理"><a href="#1-工作原理" class="headerlink" title="1.工作原理"></a>1.工作原理</h2><p>Gicsus使用Github Discussions作为数据库存储博客下面的评论。Giscus插件加载时会使用Github Discussions搜索API根据选定的映射方式(如URL、Pathname等)来查找与当前页面关联的discussion。若找不到匹配的discussion，Giscus bot就会在第一次有人留下评论或回应时自动创建一个discussion。访客通过登录Github账号在博客页面进行留言，而作者可以在Github对应仓库上管理评论。</p>
<h1 id="二、具体流程"><a href="#二、具体流程" class="headerlink" title="二、具体流程"></a>二、具体流程</h1><h2 id="1-引入Giscus"><a href="#1-引入Giscus" class="headerlink" title="1.引入Giscus"></a>1.引入Giscus</h2><p>Hexo主题<a href="https://hexo-theme-async.imalun.com/">Hexo-Theme-Async</a>支持Giscuss评论，因此引入步骤很简单，具体流程如下:</p>
<ul>
<li>在Github上选择一个仓库作为存储Discussions的仓库，一般选择博客本身所在的仓库(e.g.Github用户名&#x2F;Github用户名.github.io)，当然也可以新建一个仓库。</li>
<li>安装<a href="https://github.com/apps/giscus">Giscus</a></li>
<li>开启作为存储Discussions仓库的Discussions功能: 选择GIthub仓库-&gt;Settings-&gt;Features模块中勾选Discussions</li>
</ul>
<h2 id="2-配置Giscus"><a href="#2-配置Giscus" class="headerlink" title="2.配置Giscus"></a>2.配置Giscus</h2><p>上述操作完成后，进入<a href="https://giscus.app/zh-CN">Giscus官网</a>获取配置信息，填写完<strong>仓库</strong>和<strong>分类</strong>后就可在显示配置信息，生成的配置信息样例如下:<img src="https://img.hoi3vel.cn/tech/giscus_deploy.webp" alt="giscus配置信息样例"  data-tag='post-image' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'><br>分类可以选择<code>Announcements</code>、<code>Q&amp;A</code>等，不一定按照推荐选择分类。</p>
<p>在此配置信息中我们只需关注<strong>data-repo</strong>、<strong>data-repo-id</strong>、<strong>data-categories</strong>、<strong>data-category-id</strong>这些信息。</p>
<h2 id="3-引入至博客"><a href="#3-引入至博客" class="headerlink" title="3.引入至博客"></a>3.引入至博客</h2><p>在<code>_config.async.yml</code>中配置如下:<img src="https://img.hoi3vel.cn/tech/hexo_giscus.webp" alt="Hexo配置文件"  data-tag='post-image' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'><br>图中打码部分为专属配置信息，其中theme主题可自己更改，可供选择主题可在<a href="https://giscus.app/zh-CN">Giscus官网</a>查看。</p>
<h2 id="4-效果视图"><a href="#4-效果视图" class="headerlink" title="4.效果视图"></a>4.效果视图</h2><p>白天模式下:<img src="https://img.hoi3vel.cn/tech/giscus_example.webp" alt="giscus_exmaple"  data-tag='post-image' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'><br>黑夜模式下:<img src="https://img.hoi3vel.cn/tech/giscus_example_dark.webp" alt="giscus_example_dark"  data-tag='post-image' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'><br>评论的管理可在Github中对应仓库的<strong>Discussions</strong>中实现</p>
]]></content>
      <categories>
        <category>Tech</category>
      </categories>
      <tags>
        <tag>Giscus</tag>
        <tag>Deployment</tag>
        <tag>Hexo</tag>
        <tag>Guidance</tag>
      </tags>
  </entry>
  <entry>
    <title>基于Hexo的静态博客部署至阿里云服务器</title>
    <url>/2024/05/29/t-hexo-deploy/</url>
    <content><![CDATA[<blockquote>
<p>自己将本地博客部署到阿里云服务器过程中踩了许许多多的坑，网上的许多教程也不尽人意，因此写下这篇如何将本地博客部署至阿里云服务器的教程博客，希望对有此需求的人有所帮助。</p>
</blockquote>
<span id="more"></span>

<h2 id="一、写在前面"><a href="#一、写在前面" class="headerlink" title="一、写在前面"></a>一、写在前面</h2><h3 id="1-部署方式"><a href="#1-部署方式" class="headerlink" title="1.部署方式"></a>1.部署方式</h3><p>博客部署有两种选择：</p>
<ul>
<li>托管至GitHub或者Gitee上: 借用Github或Gitee的这一功能部署网站，操作简单且免费。国内访问速度方面Gitee&gt;Github。</li>
<li>部署至私有云服务器上：需要花钱购买服务器、域名，此方式自主性强且相应速度快。<br>在此文章中我将叙述如何将本地的Hexo静态博客部署至私有云服务器上。</li>
</ul>
<h3 id="2-相关环境"><a href="#2-相关环境" class="headerlink" title="2.相关环境"></a>2.相关环境</h3><ul>
<li>阿里云服务器: ①CPU&amp;内存-2核(vCPU) 2GiB; ②操作系统: Ubuntu 20.04 64位; ③公网带宽: 3Mbps</li>
<li>Nodejs版本(云服务器上):  v20.13.1</li>
<li>Git版本(云服务器上): v2.25.1</li>
<li>Nginx版本(云服务器上): v1.18.0(Ubuntu)</li>
</ul>
<h3 id="3-前置准备"><a href="#3-前置准备" class="headerlink" title="3.前置准备"></a>3.前置准备</h3><ul>
<li>本地成功搭建Hexo博客</li>
<li>本地成功安装了Git工具</li>
<li>域名与云服务器公有Ip实现映射绑定</li>
</ul>
<h2 id="二、工作原理"><a href="#二、工作原理" class="headerlink" title="二、工作原理"></a>二、工作原理</h2><p>本地撰写的博客会保存在source目录内，当我们输入<code>hexo generate</code>命令时，Hexo将会把我们写的Markdown文件渲染成静态文件(即网页文件)，输入<code>hexo deploy</code>时，Hexo会通过我们的配置好的免密登陆连接至服务器并将生成的静态文件推送至服务器的Git仓库内。当Git仓库内容发生变更时则会触发钩子文件进而将仓库内的内容部署至网站根目录下。<br>此外我们还需要配置好Nginx服务和域名解析，这样当用户访问我们博客的域名时，域名将会被重定向为云服务的公有Ip地址并通过Nginx服务访问网站根目录里的静态文件。相关流程图如下所示:<img src="https://img.hoi3vel.cn/tech/hexo_depoly.webp" alt="部署流程图"  data-tag='post-image' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<h2 id="三、搭建步骤-针对云服务器"><a href="#三、搭建步骤-针对云服务器" class="headerlink" title="三、搭建步骤(针对云服务器)"></a>三、搭建步骤(针对云服务器)</h2><h3 id="1-服务端初始配置"><a href="#1-服务端初始配置" class="headerlink" title="1.服务端初始配置"></a>1.服务端初始配置</h3><ul>
<li>前往阿里云网站的控制台，记录云服务器的公网Ip: 控制台-&gt;云服务器ESC-&gt;公网Ip</li>
<li>设置阿里云服务器安全组：需要开放80端口(HTTP默认访问端口)、443端口(HTTPS默认访问端口)以及22端口。具体如下图:<img src="https://img.hoi3vel.cn/tech/security_group.webp" alt="安全组图"  data-tag='post-image' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></li>
<li>重置服务器登陆密码，用于远程云登陆服务器：控制台-&gt;云服务ESC-&gt;服务器实例-&gt;全部操作(右上角)-&gt;重置实例密码</li>
</ul>
<h3 id="2-远程登陆服务器"><a href="#2-远程登陆服务器" class="headerlink" title="2.远程登陆服务器"></a>2.远程登陆服务器</h3><ul>
<li>打开Xshell并新建会话：①协议：SSH; ②主机: 云服务器公网Ip; ③端口号: 22</li>
<li>点击连接：①用户名: root; ②密码: 即上述重置服务器登陆密码时输入的密码</li>
<li>登陆成功后终端显示如下图:<img src="https://img.hoi3vel.cn/tech/Xshell_Connect.webp" alt="Xshell_Connect"  data-tag='post-image' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></li>
</ul>
<h3 id="3-创建Hexo部署目录"><a href="#3-创建Hexo部署目录" class="headerlink" title="3.创建Hexo部署目录"></a>3.创建Hexo部署目录</h3><p>Hexo部署目录实质就是云服务器中存放博客的位置。使用Xshell成功连接远程服务器后输入如下命令:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir -p /data/blog # 注意这个路径可按照自定义来</span><br></pre></td></tr></table></figure>
<h3 id="4-安装Nodejs"><a href="#4-安装Nodejs" class="headerlink" title="4.安装Nodejs"></a>4.安装Nodejs</h3><ul>
<li><p>在Xshell终端输入如下命令:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get install -y curl</span><br><span class="line">curl -fsSL https://deb.nodesource.com/setup_20.x -o nodesource_setup.sh</span><br><span class="line">sudo -E bash nodesource_setup.sh</span><br><span class="line">sudo apt-get install -y nodejs</span><br></pre></td></tr></table></figure>
</li>
<li><p>成功安装后依次输入命令: <code>node -v</code>和<code>npm -v</code>，若可显示相应版本号则说明安装成功<br>PS:上述命令安装的Nodejs版本为<strong>v20.13.1</strong>，如需要安装其他版本则可从<a href="https://github.com/nodesource/distributions">NodeSource</a>安装</p>
</li>
</ul>
<h3 id="5-安装Git"><a href="#5-安装Git" class="headerlink" title="5.安装Git"></a>5.安装Git</h3><ul>
<li><p>在Xshell终端输入命令: <code>sudo apt-get install git-core</code></p>
</li>
<li><p>成功安装后输入命令: <code>git --version</code>，若可显示其版本号则说明安装成功</p>
</li>
</ul>
<h3 id="6-安装Nginx"><a href="#6-安装Nginx" class="headerlink" title="6.安装Nginx"></a>6.安装Nginx</h3><ul>
<li><p>在Xshell终端输入命令: <code>sudo apt install nginx -y</code></p>
</li>
<li><p>成功安装后输入命令: <code>nginx -v</code>，若可显示版本号则说明安装成功</p>
</li>
<li><p>启动Nginx服务：<code>systemctl start nginx.service</code></p>
</li>
<li><p>查看Nginx服务运行状态: <code>systemctl status nginx</code>，若出现<font color='green'>active</font>字样则说明Nginx服务启动成功</p>
</li>
</ul>
<h3 id="7-配置Nginx"><a href="#7-配置Nginx" class="headerlink" title="7.配置Nginx"></a>7.配置Nginx</h3><ul>
<li><p>查看<strong>nginx.conf</strong>文件位置: <code>nginx -t</code>,一般为’&#x2F;etc&#x2F;nginx&#x2F;nginx.conf’</p>
</li>
<li><p>修改<strong>nginx.conf</strong>文件: <code>nano /etc/nginx/nginx.conf</code>，在<strong>http</strong>模块中添加如下代码：</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name 域名;</span><br><span class="line">    return 301 https://$server_name$request_uri;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen 443 ssl;</span><br><span class="line">    server_name 域名;</span><br><span class="line">    # 证书文件名称pem文件</span><br><span class="line">    ssl_certificate /xxx/xxx/域名.pem;</span><br><span class="line">    # 证书私钥文件名称key文件</span><br><span class="line">    ssl_certificate_key /xxx/xxx/域名.key;</span><br><span class="line">    # ssl验证配置 缓存有效期</span><br><span class="line">    ssl_session_timeout 5m;</span><br><span class="line">    # 安全链接可选的加密协议</span><br><span class="line">    ssl_protocols TLSv1 TLSv1.1 TLSv1.2 TLSv1.3;</span><br><span class="line">    # 配置加密套件和/加密算法</span><br><span class="line">    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE;</span><br><span class="line">    # 使用服务器端的首选算法</span><br><span class="line">    ssl_prefer_server_ciphers on;</span><br><span class="line"></span><br><span class="line">    # 指定虚拟主机根目录</span><br><span class="line">    location / &#123;</span><br><span class="line">        root /data/blog; # root后路径为Hexo在云服务器的部署目录</span><br><span class="line">        index index.html index.htm;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Ps: ssl证书可从域名购买平台上申请，然后下载上传至云服务器自定义位置即可</p>
</li>
</ul>
<h3 id="8-添加git用户"><a href="#8-添加git用户" class="headerlink" title="8.添加git用户"></a>8.添加git用户</h3><ul>
<li><p><strong>root</strong>用户默认的权限过大，处于安全考虑为云服务器添加名为git的用户，用于将博客自动部署至云服务器上</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">useradd git # 添加名为git的用户</span><br><span class="line">passwd xxx # 修改git用户的密码</span><br></pre></td></tr></table></figure>
</li>
<li><p>为git用户授予sudo权限，执行<code>nano /etc/sudoers</code>，在<code>root ALL=(ALL:ALL) ALL</code>语句下添加<code>git ALL=(ALL:ALL) ALL</code></p>
</li>
</ul>
<h3 id="9-为git用户添加SSH密钥"><a href="#9-为git用户添加SSH密钥" class="headerlink" title="9.为git用户添加SSH密钥"></a>9.为git用户添加SSH密钥</h3><p>目前为止，对git仓库进行的所有操作都需要输入密码，我们可以通过为git用户添加SSH密钥的方式来实现免密登录。原理：在本地生成一对密钥文件（分别是公钥和私钥），将公钥文件上传到服务器上；服务器收到连接请求时，会将本地的公钥与服务器的公钥进行比对，用私钥解密服务器发来的一段信息并将其发回，验证通过后准许连接。</p>
<ul>
<li><p>在<strong>本地计算机</strong>上打开Git Bush执行命令: <code>ssh-keygen -t rsa</code>，生成密钥对。运行完后可在’C:\Users\用户名.ssh’文件下找到’id_rsa’和’id_rsa.pub’文件，前者为私钥文件，后者为公钥文件</p>
</li>
<li><p>在Xshell终端先执行<code>makdir -p /home/git/.ssh</code>，后执行<code>cd /home/git/.ssh</code>以及<code>nano authorized_keys</code>，输入内容为**’id_rsa.pub’**文件内容</p>
</li>
<li><p>在Xshell终端中执行如下代码：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">su root # 从git用户更换至root用户</span><br><span class="line">chmod 600 /home/git/.ssh/authorized_keys</span><br><span class="line">chmod 700 /home/git/.ssh</span><br></pre></td></tr></table></figure>
</li>
<li><p>将.ssh文件夹及其内的所有文件所有权转交给git用户: <code>chown -R git:git /home/git/.ssh</code></p>
</li>
<li><p>在<strong>本地计算机</strong>测试是否可以用ssh免密登录服务器，在Git Bash中执行<code>ssh -v git@xxx.xxx.xxx.xxx</code>(Ps:git@后填写服务器的公网Ip) ,若成功则会出现’Welcome to Alibaba Cloud Elastic Compute Service !’提示语。</p>
</li>
</ul>
<h3 id="10-创建Git仓库并配置自动部署"><a href="#10-创建Git仓库并配置自动部署" class="headerlink" title="10.创建Git仓库并配置自动部署"></a>10.创建Git仓库并配置自动部署</h3><p>这里的Git仓库（repository）可以理解为一个存放着不同版本代码的代码库，包含了项目所有的源文件和版本控制信息。但我们在这里需要用到的是裸库，即仅包含版本控制信息的仓库。后者不保存文件，常用作服务器仓库，实现数据共享和同步。自动部署的核心在于git-hooks（钩子），可以理解为一种脚本，在特定条件下触发时会调用钩子并执行钩子文件中的内容。</p>
<ul>
<li><p>Xshell切换到<strong>root</strong>用户，新建目录并在该目录下创建Git仓库</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /home/git</span><br><span class="line">git init --bare blog.git # 创建一个名为blog的仓库，--bare参数为创建裸库</span><br></pre></td></tr></table></figure>
</li>
<li><p>打开’&#x2F;home&#x2F;git&#x2F;blog.git&#x2F;hooks’目录下的<strong>post-receive</strong>钩子文件(若无则新建)，往其添加内容<code>git --work-tree=/data/blog --git-dir=/home/git/blog.git checkout -f</code>。(Ps:work-tree填写Hexo部署目录，git-dir填写Git仓库的目录)</p>
</li>
<li><p>为钩子文件及Git仓库目录配置权限。这里需要将我们创建的仓库及部署目录的所有权移交给git用户，因为Linux下创建文件时默认只有拥有者（即创建者）才具有读写权限，而Git进行push操作时登录的用户为git用户。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chmod +x /home/git/blog.git/hooks/post-receive     #为钩子文件授予可执行权限（+x）</span><br><span class="line">chown -R git:git /home/git    #将仓库目录的所有权移交给git用户</span><br><span class="line">chown -R git:git /data/blog     #将Hexo部署目录的所有权移交给git用户</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="11-在本地计算机中更改本地博客部署路径"><a href="#11-在本地计算机中更改本地博客部署路径" class="headerlink" title="11.在本地计算机中更改本地博客部署路径"></a>11.在本地计算机中更改本地博客部署路径</h3><ul>
<li><p>打开本地计算机的Hexo文件夹，在<strong>_config.yml</strong>文件中找到deploy语句并进行如下修改：</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">    type: git</span><br><span class="line">    repository: git@xxx.xxx.xxx.xxx:/home/git/blog.git # git@云服务器公网Ip:云服务器Git仓库地址</span><br><span class="line">    branch: master</span><br></pre></td></tr></table></figure>
</li>
<li><p>依次执行命令<code>hexo clean</code>、<code>hexo generate</code>、<code>hexo deploy</code>并对云服务器’&#x2F;data&#x2F;blog’目录刷新，若有文件出现(该目录原为空目录)则说明博客已成功部署至云服务器上，至此可以在浏览器中输入域名来访问博客站点。(Ps：若域名未与公网Ip绑定&lt;即域名解析&gt;，则无法实现输入域名访问博客站点)</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Tech</category>
      </categories>
      <tags>
        <tag>Deployment</tag>
        <tag>Hexo</tag>
        <tag>Guidance</tag>
        <tag>Cloud Server</tag>
      </tags>
  </entry>
  <entry>
    <title>最长公共子串和最长公共子序列</title>
    <url>/2024/07/06/t-dynamic-programming1/</url>
    <content><![CDATA[<blockquote>
<p>自己在刷LeetCode时遇见了最长公共子串这个题目，传统的编程思想使我对此题无从下手，后面查阅资料后了解到<strong>动态规划</strong>这一思想，因此便写下文章，记录如何使用<strong>动态规划</strong>解决最长公共子串和最长公共子序列问题。</p>
</blockquote>
<span id="more"></span>

<h2 id="一、写在前面"><a href="#一、写在前面" class="headerlink" title="一、写在前面"></a>一、写在前面</h2><p>当自己在网上搜什么是<strong>动态规划</strong>时，许许多多晦涩难懂的专业术语映入眼帘，令人望而生畏。然而动态规划遵循着一套固定的流程：递归的暴力解法-&gt;带备忘录的递归解法-&gt;非递归的动态规划解法。那么什么是动态规划呢？针对一个问题，我们把这个问题拆分成一个个子问题，然后将每个子问题的最优解记录下来(即”备忘录”)，相邻子问题之间层层递进，再根据子问题答案进行反推，最终得出原问题的最优解，这便是<strong>动态规划</strong>。简单一句话就是，<strong>拆分子问题，记住过往，减少重复计算</strong>。</p>
<h2 id="二、最长公共子串"><a href="#二、最长公共子串" class="headerlink" title="二、最长公共子串"></a>二、最长公共子串</h2><h3 id="1-题目描述"><a href="#1-题目描述" class="headerlink" title="1.题目描述"></a>1.题目描述</h3><p>给出两个字符串a和b的最长连续公共子串的长度。例如“abcbcde”和“bbcbce”的最长连续公共子串是“bcbc”，长度为4。</p>
<h3 id="2-思路解析"><a href="#2-思路解析" class="headerlink" title="2.思路解析"></a>2.思路解析</h3><p>假设字符串a和b的长度分别是m和n，绘制一张m×n的二维表格<strong>table[m][n]</strong>。取字符串a和b的字符前缀a’和b’，表格位置i，j上的数字含义是: 字符串a’和b’的且以它们尾巴字符结尾的最长公共子串的长度。<br><img src="https://img.hoi3vel.cn/tech/max_common_length_1.webp" alt="table表_1"  data-tag='post-image' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'><br>假设已经知道i-1和j-1处的数值，考虑i，j的数值：</p>
<ul>
<li>如果新的<strong>a[i]</strong>和<strong>b[j]</strong>相等，则最长公共子串得到扩展，因此数值+1。</li>
<li>否则以两个字符为尾巴的最长公共子串不复存在，因此数值<strong>清零</strong>。<br>下图中左右示例对应上述两种情况：<br><img src="https://img.hoi3vel.cn/tech/max_common_length_2.webp" alt="动态规划过程图"  data-tag='post-image' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'><br>于是得到填表规律：</li>
<li>如果当前格子对应的两个字符不同，则写0。</li>
<li>否则采用斜上方的格子的数值+1<br><img src="https://img.hoi3vel.cn/tech/max_common_length_3.webp" alt="填表规律图"  data-tag='post-image' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'><br>用代码描述这个填表规则：</li>
<li>若<strong>a[i]</strong>!&#x3D;<strong>b[j]</strong>，则填写<strong>table[i][j]</strong>&#x3D;0</li>
<li>否则，填写<strong>table[i][j]</strong>&#x3D;<strong>table[i-1][j-1]</strong>+1<br>表格中的最大值即为最长公共子串的长度，时间复杂度为O(m*n)。</li>
</ul>
<h3 id="3-代码实现"><a href="#3-代码实现" class="headerlink" title="3.代码实现"></a>3.代码实现</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 返回字符串 a 和 b 的最长公共子串的长度</span></span><br><span class="line"><span class="comment">// 例如 &quot;abcdbcdef&quot; 和 &quot;bbcbbcdee&quot; 的公共字符串是 &quot;bcde&quot; 长度是 4</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">LongestCommonSubstring</span><span class="params">(<span class="type">char</span> *a, <span class="type">int</span> a_length, <span class="type">char</span> *b, <span class="type">int</span> b_length)</span> &#123;</span><br><span class="line">    <span class="type">int</span> table[a_length][b_length];</span><br><span class="line">    <span class="type">int</span> max = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; a_length; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; b_length; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (a[i] == b[j]) &#123;</span><br><span class="line">                <span class="keyword">if</span> (i &gt;= <span class="number">1</span> &amp;&amp; j &gt;= <span class="number">1</span>)</span><br><span class="line">                    table[i][j] = table[i - <span class="number">1</span>][j - <span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    table[i][j] = <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                table[i][j] = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (table[i][j] &gt; max) &#123;</span><br><span class="line">                max = table[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> max;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="三、最长公共子序列"><a href="#三、最长公共子序列" class="headerlink" title="三、最长公共子序列"></a>三、最长公共子序列</h2><h3 id="1-题目描述-1"><a href="#1-题目描述-1" class="headerlink" title="1.题目描述"></a>1.题目描述</h3><p>给出两个字符串a和b的最长公共子序列的长度。其和公共子串不同的是，公共子序列不要求连续。最长公共子序列是非常经典的动态规划问题，简称LCS问题。例如“abcbcde”和“acabdef”的最长公共子序列是“acbde”，长度为5。<a href="https://leetcode.cn/problems/longest-common-subsequence/description/">LeetCodet题目-最长公共子序列</a></p>
<h3 id="2-思路解析-1"><a href="#2-思路解析-1" class="headerlink" title="2.思路解析"></a>2.思路解析</h3><p>如果两个字符串的尾位置分别是i和j，假设它们的最长公共子序列的长度是函数<strong>f(i, j)</strong>:<img src="https://img.hoi3vel.cn/tech/max_common_list_1.webp" alt="最长公共子序列函数"  data-tag='post-image' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'><br>考虑函数的递推关系：</p>
<ul>
<li>如果两个字符串的尾字符相同，易知<strong>f(i, j)&#x3D;f(i-1, j-1)+1</strong>:<img src="https://img.hoi3vel.cn/tech/max_common_list_2.webp" alt="两字符串尾字符相同序列函数变化"  data-tag='post-image' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></li>
<li>如果尾字符不同，上述递推关系则不成立:<img src="https://img.hoi3vel.cn/tech/max_common_list_3.webp" alt="两字符串尾字符不同序列函数变化"  data-tag='post-image' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'><br>原因在于，虽然尾字符不同，但一个字符串的尾字符可能和另一个字符串的前面的某个字符相同，导致最长公共子序列得到扩展。<img src="https://img.hoi3vel.cn/tech/max_common_list_4.webp" alt="尾字符与非尾字符对应"  data-tag='post-image' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'><br>注意，上图的关系可以进一步表达为：<img src="https://img.hoi3vel.cn/tech/max_common_list_5.webp" alt="尾字符与非尾字符对应进阶"  data-tag='post-image' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'><br>考虑其一般性，取<strong>f(i-1, j)和f(i, j-1)的最大值</strong>:<img src="https://img.hoi3vel.cn/tech/max_common_list_6.webp" alt="尾字符与非尾字符一般性"  data-tag='post-image' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'><br>假设字符串a和b的长度分别是m和n，绘制一张m×n的二维表格<strong>table[m][n]</strong>。取字符串a和b的前缀字符串“a’”和“b’”，表格位置i，j上的数字含义为f(i，j)即字符串a’和b’的最长公共子序列的长度。<img src="https://img.hoi3vel.cn/tech/max_common_list_7.webp" alt="table表_2"  data-tag='post-image' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'><br>利用已分析的递推关系，表格填写规则如下：</li>
<li>如果字符<strong>a[i]</strong>和<strong>b[j]</strong>相同，则最长公共子序列得到扩展，数值+1</li>
<li>否则，采用左边的和上面的方格中的数值的最大值<br><img src="https://img.hoi3vel.cn/tech/max_common_list_8.webp" alt="table表_2计算规则"  data-tag='post-image' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'><br>按照上述规律，字符串“abcbcde”和“acabdef”的填表过程如下：<img src="https://img.hoi3vel.cn/tech/max_common_list_9.webp" alt="table表_2填写过程"  data-tag='post-image' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'><br>上述规则映射至代码为：</li>
<li>若<strong>a[i]&#x3D;&#x3D;b[j]</strong>，则填写<strong>table[i][j]&#x3D;table[i-1][j-1]+1</strong></li>
<li>否则填写<strong>table[i][j]&#x3D;max(table[i-1][j], table[i][j-1])</strong><br>表格中最大值即为最长公共子序列的长度，时间复杂度为O(m*n)。</li>
</ul>
<h3 id="3-代码实现-1"><a href="#3-代码实现-1" class="headerlink" title="3.代码实现"></a>3.代码实现</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> MAX(a, b) (a) &gt; (b) ? (a) : (b)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回两个字符串 a 和 b 的最长公共子序列的长度</span></span><br><span class="line"><span class="comment">// 例如 &quot;abcbcde&quot; 和 &quot;acabdef&quot; 的最长公共子序列是 &quot;acbde&quot; ，长度为 5</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">LongestCommonSubsequence</span><span class="params">(<span class="type">char</span> *a, <span class="type">int</span> a_length, <span class="type">char</span> *b, <span class="type">int</span> b_length)</span> &#123;</span><br><span class="line">    <span class="type">int</span> table[a_length][b_length];</span><br><span class="line">    <span class="type">int</span> max = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; a_length; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; b_length; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (a[i] == b[j]) &#123;</span><br><span class="line">                <span class="keyword">if</span> (i &gt;= <span class="number">1</span> &amp;&amp; j &gt;= <span class="number">1</span>)</span><br><span class="line">                    table[i][j] = table[i - <span class="number">1</span>][j - <span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    table[i][j] = <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (i &gt;= <span class="number">1</span> &amp;&amp; j &gt;= <span class="number">1</span>)</span><br><span class="line">                    table[i][j] = MAX(table[i - <span class="number">1</span>][j], table[i][j - <span class="number">1</span>]);</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (i &lt;= <span class="number">0</span> &amp;&amp; j &gt;= <span class="number">1</span>)</span><br><span class="line">                    table[i][j] = table[i][j - <span class="number">1</span>];</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (i &gt;= <span class="number">1</span> &amp;&amp; j &lt;= <span class="number">0</span>)</span><br><span class="line">                    table[i][j] = table[i - <span class="number">1</span>][j];</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    table[i][j] = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (max &lt; table[i][j]) max = table[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> max;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Tech</category>
      </categories>
      <tags>
        <tag>Algorithm</tag>
        <tag>Dynamic Prgromming</tag>
      </tags>
  </entry>
</search>
